1]

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Wellness Dashboard</title>
  <style>
    :root {
      --bg-color: #f4f7fa;
      --sidebar-color: #2d3e50;
      --text-color: #000;
      --card-bg: white;
      --button-bg: #c89b65;
      --todo-bg: #f0f0f0;
    }

    body.dark {
      --bg-color: #1f1f1f;
      --sidebar-color: #121212;
      --text-color: #fff;
      --card-bg: #2b2b2b;
      --button-bg: #8e6b3d;
      --todo-bg: #333;
    }

    body {
      margin: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: var(--bg-color);
      color: var(--text-color);
      display: flex;
      height: 100vh;
    }

    .sidebar {
      width: 25%;
      background-color: var(--sidebar-color);
      color: white;
      padding: 2rem;
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .sidebar img {
      border-radius: 50%;
      width: 120px;
      height: 120px;
      object-fit: cover;
      margin-bottom: 1rem;
    }

    .sidebar h1 {
      font-size: 24px;
    }

    .sidebar p {
      margin: 4px 0;
    }

    .mood-icons {
      display: flex;
      margin-top: 1rem;
      gap: 0.5rem;
    }

    .mood-icons span {
      font-size: 24px;
      cursor: pointer;
    }

    .dark-toggle {
      margin-top: 1rem;
      background: #ffffff20;
      color: white;
      border: 1px solid white;
      padding: 0.5rem 1rem;
      border-radius: 6px;
      cursor: pointer;
    }

    .main {
      flex: 1;
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      grid-template-rows: repeat(2, 1fr);
      gap: 1rem;
      padding: 2rem;
    }

    .card {
      background: var(--card-bg);
      border-radius: 12px;
      padding: 1.5rem;
      box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }

    .card h2 {
      margin-top: 0;
    }

    .button {
      background-color: var(--button-bg);
      color: white;
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-weight: bold;
    }

    .todo-input {
      display: flex;
      gap: 0.5rem;
      margin-top: 1rem;
    }

    .todo-input input {
      flex: 1;
      padding: 0.5rem;
      border: 1px solid #ccc;
      border-radius: 6px;
    }

    .todo-input button {
      padding: 0.5rem 1rem;
      background-color: var(--sidebar-color);
      color: white;
      border: none;
      border-radius: 6px;
    }

    .todo-list {
      margin-top: 1rem;
    }

    .todo-item {
      margin: 5px 0;
      background: var(--todo-bg);
      padding: 0.5rem;
      border-radius: 6px;
    }

    canvas {
      max-width: 100%;
    }
  </style>
</head>
<body>
  <div class="sidebar">
    <h1>Hello, Raksha!</h1>
    <img src="https://i.imgur.com/HLfRr6t.jpg" alt="User Photo" />
    <p>SWE - III</p>
    <p>IT DEPARTMENT</p>
    <p>How are you feeling today?</p>
    <div class="mood-icons">
      <span>üòÄ</span><span>üôÇ</span><span>üòê</span><span>‚òπ</span><span>üò¢</span>
    </div>
    <button class="dark-toggle" onclick="toggleDarkMode()">Toggle Dark Mode</button>
  </div>
  <div class="main">
    <div class="card">
      <h2>üåû Good Morning, Raksha!</h2>
      <p>Your mind matters ‚Äì even 2 minutes can make a difference üåû</p>
      <p>üïó 8:42 AM ‚Ä¢ Monday</p>
      <button class="button">Start Morning CheckIn ‚û°</button>
    </div>
    <div class="card">
      <h2>To-Do List</h2>
      <div class="todo-input">
        <input type="text" id="taskInput" placeholder="Add a new task">
        <button onclick="addTask()">Add</button>
      </div>
      <div class="todo-list" id="todoList"></div>
    </div>
    <div class="card">
      <h2>üåô Good Evening, Raksha!</h2>
      <p>Take a moment to reflect and log your wellness score</p>
      <p>üïï 6:42 PM ‚Ä¢ Monday</p>
      <button class="button">Start Evening CheckOut üìù</button>
    </div>
    <div class="card">
      <canvas id="wellnessChart"></canvas>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    const ctx = document.getElementById('wellnessChart');
    new Chart(ctx, {
      type: 'pie',
      data: {
        labels: ['Needs Improvement', 'Healthy'],
        datasets: [{
          label: 'Wellness Score',
          data: [18, 82],
          backgroundColor: ['#397ca7', '#8cd3f8']
        }]
      },
    });

    function addTask() {
      const taskInput = document.getElementById('taskInput');
      const task = taskInput.value.trim();
      if (task !== '') {
        const taskList = document.getElementById('todoList');
        const taskItem = document.createElement('div');
        taskItem.className = 'todo-item';
        taskItem.textContent = task;
        taskList.appendChild(taskItem);
        taskInput.value = '';
      }
    }

    function toggleDarkMode() {
      document.body.classList.toggle('dark');
    }
  </script>
</body>
</html>

2] 

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Wellness Dashboard</title>
  <style>
    :root {
      --bg-color: #f4f7fa;
      --sidebar-color: #2d3e50;
      --text-color: #000;
      --card-bg: white;
      --button-bg: #c89b65;
      --todo-bg: #f0f0f0;
    }

    body.dark {
      --bg-color: #1f1f1f;
      --sidebar-color: #121212;
      --text-color: #fff;
      --card-bg: #2b2b2b;
      --button-bg: #8e6b3d;
      --todo-bg: #333;
    }

    body {
      margin: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: var(--bg-color);
      color: var(--text-color);
      display: flex;
      height: 100vh;
    }

    .sidebar {
      width: 25%;
      background-color: var(--sidebar-color);
      color: white;
      padding: 2rem;
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .sidebar img {
      border-radius: 50%;
      width: 120px;
      height: 120px;
      object-fit: cover;
      margin-bottom: 1rem;
    }

    .sidebar h1 {
      font-size: 24px;
    }

    .sidebar p {
      margin: 4px 0;
    }

    .mood-icons {
      display: flex;
      margin-top: 1rem;
      gap: 0.5rem;
    }

    .mood-icons span {
      font-size: 24px;
      cursor: pointer;
    }

    .dark-toggle {
      margin-top: 1rem;
      background: #ffffff20;
      color: white;
      border: 1px solid white;
      padding: 0.5rem 1rem;
      border-radius: 6px;
      cursor: pointer;
    }

    .main {
      flex: 1;
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      grid-template-rows: repeat(2, 1fr);
      gap: 1rem;
      padding: 2rem;
    }

    .card {
      background: var(--card-bg);
      border-radius: 12px;
      padding: 1.5rem;
      box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }

    .card h2 {
      margin-top: 0;
    }

    .button {
      background-color: var(--button-bg);
      color: white;
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-weight: bold;
    }

    .todo-input {
      display: flex;
      gap: 0.5rem;
      margin-top: 1rem;
    }

    .todo-input input {
      flex: 1;
      padding: 0.5rem;
      border: 1px solid #ccc;
      border-radius: 6px;
    }

    .todo-input button {
      padding: 0.5rem 1rem;
      background-color: var(--sidebar-color);
      color: white;
      border: none;
      border-radius: 6px;
    }

    .todo-list {
      margin-top: 1rem;
      list-style: none;
      padding-left: 0;
    }

    .task-item {
      background: var(--todo-bg);
      padding: 0.5rem;
      border-radius: 6px;
      margin-bottom: 0.5rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .task-item.completed span {
      text-decoration: line-through;
      opacity: 0.6;
    }

    .task-item button {
      background: none;
      border: none;
      cursor: pointer;
      font-size: 1rem;
      margin-left: 0.5rem;
      color: var(--text-color);
    }

    canvas {
      max-width: 100%;
    }
  </style>
</head>
<body>
  <div class="sidebar">
    <h1>Hello, Raksha!</h1>
    <img src="static/profile.jpg" alt="User Photo" />
    <p>SWE - III</p>
    <p>IT DEPARTMENT</p>
    <p>How are you feeling today?</p>
    <div class="mood-icons">
      <span>üòÄ</span><span>üôÇ</span><span>üòê</span><span>‚òπ</span><span>üò¢</span>
    </div>
    <button class="dark-toggle" onclick="toggleDarkMode()">Toggle Dark Mode</button>
  </div>
  <div class="main">
    <div class="card">
      <h2>üåû Good Morning, Raksha!</h2>
      <p>Your mind matters ‚Äì even 2 minutes can make a difference üåû</p>
      <p>üïó 8:42 AM ‚Ä¢ Monday</p>
      <button class="button">Start Morning CheckIn ‚û°</button>
    </div>
    <div class="card">
      <h2>To-Do List</h2>
      <div class="todo-input">
        <input type="text" id="taskInput" placeholder="Add a new task">
        <button onclick="addTask()">Add</button>
      </div>
      <ul class="todo-list" id="taskList"></ul>
    </div>
    <div class="card">
      <h2>üåô Good Evening, Raksha!</h2>
      <p>Take a moment to reflect and log your wellness score</p>
      <p>üïï 6:42 PM ‚Ä¢ Monday</p>
      <button class="button">Start Evening CheckOut üìù</button>
    </div>
    <div class="card">
      <canvas id="wellnessChart"></canvas>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    const ctx = document.getElementById('wellnessChart');
    new Chart(ctx, {
      type: 'pie',
      data: {
        labels: ['Needs Improvement', 'Healthy'],
        datasets: [{
          label: 'Wellness Score',
          data: [18, 82],
          backgroundColor: ['#397ca7', '#8cd3f8']
        }]
      },
    });

    // To-Do Logic
    function addTask() {
      const taskInput = document.getElementById('taskInput');
      const taskText = taskInput.value.trim();
      if (taskText === '') return;

      const taskList = document.getElementById('taskList');
      const li = document.createElement('li');
      li.className = 'task-item';

      const span = document.createElement('span');
      span.textContent = taskText;

      const checkBtn = document.createElement('button');
      checkBtn.innerHTML = '‚úÖ';
      checkBtn.onclick = () => li.classList.toggle('completed');

      const deleteBtn = document.createElement('button');
      deleteBtn.innerHTML = 'üóëÔ∏è';
      deleteBtn.onclick = () => li.remove();

      li.appendChild(span);
      li.appendChild(checkBtn);
      li.appendChild(deleteBtn);
      taskList.appendChild(li);
      taskInput.value = '';
    }

    function toggleDarkMode() {
      document.body.classList.toggle('dark');
    }
  </script>
</body>
</html>

question_logic.py]
import random

# üß† List of meaningful morning questions with metadata
MORNING_QUESTIONS = [
    {"id": "q1", "text": "What's one thing you're looking forward to today?", "type": "text"},
    {"id": "q2", "text": "Is there any support you need from your team or manager today?", "type": "text"},
    {"id": "q3", "text": "How would you describe your energy levels this morning?", "type": "slider"},
    {"id": "q4", "text": "Are there any blockers that might affect your productivity today?", "type": "text"},
    {"id": "q5", "text": "What's your top priority task for today?", "type": "text"},
    {"id": "q6", "text": "How motivated do you feel to work today?", "type": "slider"},
    {"id": "q7", "text": "How well did you sleep last night?", "type": "slider"},
    {"id": "q8", "text": "Is there something you're anxious or excited about today?", "type": "text"},
    {"id": "q9", "text": "What can make today a good day for you?", "type": "text"},
    {"id": "q10", "text": "Are you facing any personal distractions today?", "type": "text"},
    {"id": "q11", "text": "How confident are you feeling about achieving your goals today?", "type": "slider"},
    {"id": "q12", "text": "Is there any feedback you‚Äôd like to share from yesterday?", "type": "text"},
    {"id": "q13", "text": "What‚Äôs your intention or focus for today?", "type": "text"},
    {"id": "q14", "text": "Do you feel connected with your work and team today?", "type": "slider"},
    {"id": "q15", "text": "Is there anything you‚Äôd like to improve in your daily routine?", "type": "text"}
]

def get_morning_questions(user_name=None):
    """
    Returns 3‚Äì4 random morning questions as dictionaries.
    Optionally adds the user's name to personalize.
    """
    selected_questions = random.sample(MORNING_QUESTIONS, k=random.choice([3, 4]))

    if user_name:
        for q in selected_questions:
            if q["text"].startswith("What's") or q["text"].startswith("What‚Äôs"):
                q["text"] = f"{user_name}, {q['text']}"

    return selected_questions

morning_questions.html]

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Morning Check-In</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 700px;
            margin: 30px auto;
            padding: 20px;
            background-color: #f9f9f9;
        }
        h2 {
            color: #333;
        }
        li {
            margin-bottom: 20px;
            list-style-type: none;
        }
        label {
            font-weight: bold;
        }
        input[type="text"] {
            padding: 5px;
            width: 60%;
        }
        input[type="range"] {
            width: 60%;
        }
        .slider-value {
            margin-left: 10px;
            font-weight: bold;
        }
        button {
            padding: 8px 16px;
            font-size: 16px;
        }
    </style>
</head>
<body>
    <h2>Good Morning üëã</h2>
    <p>Let‚Äôs start your day with a quick check-in:</p>

    <form action="/submit_morning_checkin" method="POST">
        <ul>
        {% for question in questions %}
            <li>
                <label for="{{ question.id }}">{{ question.text }}</label><br>
                {% if question.type == 'slider' %}
                    <input type="range" id="{{ question.id }}" name="{{ question.id }}" min="1" max="10" value="5" oninput="updateSliderValue(this)">
                    <span class="slider-value">5</span>
                {% elif question.type == 'text' %}
                    <input type="text" id="{{ question.id }}" name="{{ question.id }}" placeholder="Your response">
                {% endif %}
            </li>
        {% endfor %}
        </ul>
        <br>
        <button type="submit">Submit Check-In</button>
    </form>

    <script>
        function updateSliderValue(slider) {
            const valueDisplay = slider.nextElementSibling;
            valueDisplay.textContent = slider.value;
        }
    </script>
</body>
</html>

app.py - 21.04.2025
# from flask import Flask, request, jsonify, render_template, redirect, url_for
# import numpy as np
# import pickle
# from flask_cors import CORS
# from question_logic import get_morning_questions
# import re  # For email validation

# app = Flask(__name__)
# CORS(app)

# # Load trained model
# with open("D:/WorkSphere/Backend/wellness_model.pkl", "rb") as f:
#     reg_model = pickle.load(f)

# # üîí Dummy users - replace with DB later
# users = {
#     "user@example.com": "User123",
#     "rakshasinha1908@gmail.com": "raksha19"
# }

# # ----------------- ROUTES ------------------

# # Email validation function
# def is_valid_email(email):
#     # Regular expression to validate email format
#     pattern = r'^[\w\.-]+@[\w\.-]+\.\w{2,4}$'
#     return re.match(pattern, email)

# @app.route('/')
# def home():
#     return redirect(url_for('login'))

# @app.route('/login')
# def login():
#     return render_template('login.html')

# @app.route('/dashboard', methods=['POST'])
# def dashboard():
#     email = request.form.get("email")

#     # ‚úÖ Regex to validate email format
#     if re.match(r"[^@]+@[^@]+\.[^@]+", email):
#         return render_template('dashboard.html', user=email)
#     else:
#         return "‚ùå Invalid Email Format. Please go back and try again."

# @app.route('/morning-checkin')
# def morning_questions():
#     # ‚úÖ Get user from query parameter
#     user_email = request.args.get("user")
#     if not user_email:
#         return "User email not provided", 400
    
#     questions = get_morning_questions(user_name=user_email.split("@")[0].capitalize())
#     return render_template('morning_questions.html', questions=questions)

# @app.route('/submit_morning_checkin', methods=['POST'])
# def submit_morning_checkin():
#     user_responses = request.form.to_dict()
#     print("üì• Received Responses:", user_responses)  # For debugging

#     # You can store/analyze/save responses here
#     return "‚úÖ Morning Check-In Submitted! Thank you."

# @app.route('/logout')
# def logout():
#     return render_template('logout.html')

# @app.route('/predict', methods=['POST'])
# def predict():
#     data = request.json
#     print("üì• Received Data:", data)

#     try:
#         workload = float(data.get("Workload"))
#         task_complexity = float(data.get("Task Complexity"))
#         break_duration = float(data.get("Break Duration (mins)", data.get("Break Duration")))
#         overtime = float(data.get("Overtime Hours", data.get("Overtime")))

#         input_data = np.array([[workload, task_complexity, break_duration, overtime]])
#         predicted_score = reg_model.predict(input_data)[0]
#         predicted_score = round(predicted_score, 2)
#         predicted_score = max(min(predicted_score, 100), 0)

#         return jsonify({"Wellness Score": predicted_score})
    
#     except Exception as e:
#         print("‚ùå Error in prediction:", str(e))
#         return jsonify({"error": str(e)}), 500

# # ----------------- RUN ------------------

# if __name__ == "__main__":
#     app.run(debug=True, port=5001)


# from flask import Flask, request, jsonify, render_template, redirect, url_for
# import numpy as np
# import pickle
# from flask_cors import CORS
# from question_logic import get_morning_questions
# import re  # For email validation

# app = Flask(__name__)
# CORS(app)

# # Load trained workload-wellness model
# with open("D:/WorkSphere/Backend/wellness_model.pkl", "rb") as f:
#     reg_model = pickle.load(f)

# # üîí Dummy users - replace with DB later
# users = {
#     "user@example.com": "User123",
#     "rakshasinha1908@gmail.com": "raksha19"
# }

# # ----------------- ROUTES ------------------

# # Email validation function
# def is_valid_email(email):
#     # Regular expression to validate email format
#     pattern = r'^[\w\.-]+@[\w\.-]+\.\w{2,4}$'
#     return re.match(pattern, email)

# @app.route('/')
# def home():
#     return redirect(url_for('login'))

# @app.route('/login')
# def login():
#     return render_template('login.html')

# @app.route('/dashboard', methods=['POST'])
# def dashboard():
#     email = request.form.get("email")

#     # ‚úÖ Regex to validate email format
#     if re.match(r"[^@]+@[^@]+\.[^@]+", email):
#         return render_template('dashboard.html', user=email)
#     else:
#         return "‚ùå Invalid Email Format. Please go back and try again."

# @app.route('/morning-checkin')
# def morning_questions():
#     # ‚úÖ Get user from query parameter
#     user_email = request.args.get("user")
#     if not user_email:
#         return "User email not provided", 400

#     questions = get_morning_questions(user_name=user_email.split("@")[0].capitalize())
#     return render_template('morning_questions.html', questions=questions)

# @app.route('/submit_morning_checkin', methods=['POST'])
# def submit_morning_checkin():
#     user_responses = request.form.to_dict()
#     print("üì• Received Responses:", user_responses)  # For debugging

#     try:
#         # üß† Preprocess the answers
#         from data_preprocessing import preprocess_answers
#         features = preprocess_answers(user_responses)

#         # üìä Load emotional wellbeing model
#         with open("D:/WorkSphere/Backend/wellbeing_model.pkl", "rb") as f:
#             model = pickle.load(f)

#         # ü§ñ Predict the wellbeing score
#         input_data = np.array(features).reshape(1, -1)
#         predicted_score = model.predict(input_data)[0]
#         predicted_score = round(predicted_score)
#         predicted_score = max(min(predicted_score, 100), 0)

#         # ‚úÖ Return the response with score
#         return f"‚úÖ Morning Check-In Submitted! Thank you. Your Emotional Wellbeing Score is: {predicted_score}"

#     except Exception as e:
#         print("‚ùå Prediction Error:", str(e))
#         return f"‚ùå Error while predicting wellbeing score: {str(e)}"

# @app.route('/logout')
# def logout():
#     return render_template('logout.html')

# @app.route('/predict', methods=['POST'])
# def predict():
#     data = request.json
#     print("üì• Received Data:", data)

#     try:
#         workload = float(data.get("Workload"))
#         task_complexity = float(data.get("Task Complexity"))
#         break_duration = float(data.get("Break Duration (mins)", data.get("Break Duration")))
#         overtime = float(data.get("Overtime Hours", data.get("Overtime")))

#         input_data = np.array([[workload, task_complexity, break_duration, overtime]])
#         predicted_score = reg_model.predict(input_data)[0]
#         predicted_score = round(predicted_score, 2)
#         predicted_score = max(min(predicted_score, 100), 0)

#         return jsonify({"Wellness Score": predicted_score})

#     except Exception as e:
#         print("‚ùå Error in prediction:", str(e))
#         return jsonify({"error": str(e)}), 500

# # ----------------- RUN ------------------

# if __name__ == "__main__":
#     app.run(debug=True, port=5001)


from flask import Flask, request, jsonify, render_template, redirect, url_for
import numpy as np
import pickle
from flask_cors import CORS
from question_logic import get_morning_questions, MORNING_QUESTIONS
import re  # For email validation

app = Flask(__name__)
CORS(app)

# Load trained workload-wellness model
with open("D:/WorkSphere/Backend/wellness_model.pkl", "rb") as f:
    reg_model = pickle.load(f)

# üîí Dummy users - replace with DB later
users = {
    "user@example.com": "User123",
    "rakshasinha1908@gmail.com": "raksha19"
}

# ----------------- ROUTES ------------------

# Email validation function
def is_valid_email(email):
    # Regular expression to validate email format
    pattern = r'^[\w\.-]+@[\w\.-]+\.\w{2,4}$'
    return re.match(pattern, email)

@app.route('/')
def home():
    return redirect(url_for('login'))

@app.route('/login')
def login():
    return render_template('login.html')

@app.route('/dashboard', methods=['POST'])
def dashboard():
    email = request.form.get("email")

    # ‚úÖ Regex to validate email format
    if re.match(r"[^@]+@[^@]+\.[^@]+", email):
        return render_template('dashboard.html', user=email)
    else:
        return "‚ùå Invalid Email Format. Please go back and try again."

@app.route('/morning-checkin')
def morning_questions():
    # ‚úÖ Get user from query parameter
    user_email = request.args.get("user")
    if not user_email:
        return "User email not provided", 400

    questions = get_morning_questions(user_name=user_email.split("@")[0].capitalize())
    return render_template('morning_questions.html', questions=questions)

@app.route('/submit_morning_checkin', methods=['POST'])
def submit_morning_checkin():
    user_responses = request.form.to_dict()
    print("üì• Received Responses:", user_responses)  # For debugging

    try:
        from data_preprocessing import preprocess_answers

        # Step 1: Make sure all 15 question IDs are represented
        all_ids = [q["id"] for q in MORNING_QUESTIONS]
        default_values = {
            "slider": 5,  # Neutral
            "dropdown": "No"  # Default option for missing dropdown
        }

        # Step 2: Fill missing answers
        full_response = {}
        for q in MORNING_QUESTIONS:
            qid = q["id"]
            if qid in user_responses:
                full_response[qid] = user_responses[qid]
            else:
                if q["type"] == "slider":
                    full_response[qid] = default_values["slider"]
                elif q["type"] == "dropdown":
                    full_response[qid] = q["options"][0]  # Default to first option

        print("üßæ Full Responses (with defaults):", full_response)

        # Step 3: Preprocess & Predict
        features = preprocess_answers(full_response)

        with open("D:/WorkSphere/Backend/wellbeing_model.pkl", "rb") as f:
            model = pickle.load(f)

        input_data = np.array(features).reshape(1, -1)
        predicted_score = model.predict(input_data)[0]
        predicted_score = round(predicted_score)
        predicted_score = max(min(predicted_score, 100), 0)

        return f"‚úÖ Morning Check-In Submitted! Your Emotional Wellbeing Score is: {predicted_score}"

    except Exception as e:
        print("‚ùå Prediction Error:", str(e))
        return f"‚ùå Error while predicting wellbeing score: {str(e)}"

@app.route('/logout')
def logout():
    return render_template('logout.html')

@app.route('/predict', methods=['POST'])
def predict():
    data = request.json
    print("üì• Received Data:", data)

    try:
        workload = float(data.get("Workload"))
        task_complexity = float(data.get("Task Complexity"))
        break_duration = float(data.get("Break Duration (mins)", data.get("Break Duration")))
        overtime = float(data.get("Overtime Hours", data.get("Overtime")))

        input_data = np.array([[workload, task_complexity, break_duration, overtime]])
        predicted_score = reg_model.predict(input_data)[0]
        predicted_score = round(predicted_score, 2)
        predicted_score = max(min(predicted_score, 100), 0)

        return jsonify({"Wellness Score": predicted_score})

    except Exception as e:
        print("‚ùå Error in prediction:", str(e))
        return jsonify({"error": str(e)}), 500

# ----------------- RUN ------------------

if __name__ == "__main__":
    app.run(debug=True, port=5001)

26-04-2025

from flask import Flask, request, jsonify, render_template, redirect, url_for
import numpy as np
import pickle
from flask_cors import CORS
from flask_mysqldb import MySQL
from question_logic import get_morning_questions, MORNING_QUESTIONS
import re  # For email validation
from werkzeug.security import generate_password_hash, check_password_hash  # For password hashing

app = Flask(__name__)
CORS(app)

# ‚úÖ MySQL Config
app.config['MYSQL_HOST'] = 'localhost'
app.config['MYSQL_USER'] = 'root'
app.config['MYSQL_PASSWORD'] = '123456'
app.config['MYSQL_DB'] = 'wellness_db'

mysql = MySQL(app)

# Load trained workload-wellness model
with open("D:/WorkSphere/Backend/wellness_model.pkl", "rb") as f:
    reg_model = pickle.load(f)

# ----------------- ROUTES ------------------

# Email validation function
def is_valid_email(email):
    pattern = r'^[\w\.-]+@[\w\.-]+\.\w{2,4}$'
    return re.match(pattern, email)

@app.route('/')
def home():
    return redirect(url_for('login'))

@app.route('/login')
def login():
    return render_template('login.html')

@app.route('/dashboard', methods=['POST'])
def dashboard():
    email = request.form.get('email').strip()
    print(f"Form email: >{email}<") #check 
    password = request.form.get("password")

    print(f"üîç Email entered: {email}")

    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        return "‚ùå Invalid Email Format. Please go back and try again."

    try:
        cursor = mysql.connection.cursor()

        # Add these debug print statements
        print(f"Checking email: {email}")  # Print the email you're going to search for
        cursor.execute("SELECT * FROM users WHERE email = %s", (email,))
        user = cursor.fetchone()

        # Add this print statement to see the retrieved user
        print(f"Retrieved user: {user}")

        cursor.close()

        if user:
            stored_password_hash = user[3]  # password is at index 3
            if stored_password_hash == password:  # plain text comparison
                return render_template('dashboard.html', user=email)
            else:
                return "‚ùå Incorrect Password."
        else:
            return "‚ùå User not found."

    except Exception as e:
        return f"‚ùå Database Error: {str(e)}"

@app.route('/morning-checkin')
def morning_questions():
    user_email = request.args.get("user")
    if not user_email:
        return "User email not provided", 400

    questions = get_morning_questions(user_name=user_email.split("@")[0].capitalize())
    return render_template('morning_questions.html', questions=questions)

@app.route('/submit_morning_checkin', methods=['POST'])
def submit_morning_checkin():
    user_responses = request.form.to_dict()
    print("üì• Received Responses:", user_responses)

    try:
        from data_preprocessing import preprocess_answers

        all_ids = [q["id"] for q in MORNING_QUESTIONS]
        default_values = {
            "slider": 5,
            "dropdown": "No"
        }

        full_response = {}
        for q in MORNING_QUESTIONS:
            qid = q["id"]
            if qid in user_responses:
                full_response[qid] = user_responses[qid]
            else:
                if q["type"] == "slider":
                    full_response[qid] = default_values["slider"]
                elif q["type"] == "dropdown":
                    full_response[qid] = q["options"][0]

        print("üßæ Full Responses (with defaults):", full_response)

        features = preprocess_answers(full_response)

        with open("D:/WorkSphere/Backend/wellbeing_model.pkl", "rb") as f:
            model = pickle.load(f)

        input_data = np.array(features).reshape(1, -1)
        predicted_score = model.predict(input_data)[0]
        predicted_score = round(predicted_score)
        predicted_score = max(min(predicted_score, 100), 0)

        return f"‚úÖ Morning Check-In Submitted! Your Emotional Wellbeing Score is: {predicted_score}"

    except Exception as e:
        print("‚ùå Prediction Error:", str(e))
        return f"‚ùå Error while predicting wellbeing score: {str(e)}"

@app.route('/logout')
def logout():
    return render_template('logout.html')

@app.route('/predict', methods=['POST'])
def predict():
    data = request.json
    print("üì• Received Data:", data)

    try:
        workload = float(data.get("Workload"))
        task_complexity = float(data.get("Task Complexity"))
        break_duration = float(data.get("Break Duration (mins)", data.get("Break Duration")))
        overtime = float(data.get("Overtime Hours", data.get("Overtime")))

        input_data = np.array([[workload, task_complexity, break_duration, overtime]])
        predicted_score = reg_model.predict(input_data)[0]
        predicted_score = round(predicted_score, 2)
        predicted_score = max(min(predicted_score, 100), 0)

        return jsonify({"Wellness Score": predicted_score})

    except Exception as e:
        print("‚ùå Error in prediction:", str(e))
        return jsonify({"error": str(e)}), 500

# ‚úÖ Corrected register route
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        email = request.form['email']
        username = request.form['username']
        password = request.form['password']
        hashed_password = generate_password_hash(password)

        cursor = mysql.connection.cursor()
        cursor.execute("INSERT INTO users (username, email, password) VALUES (%s, %s, %s)", 
                       (username, email, hashed_password))
        mysql.connection.commit()
        cursor.close()
        return '‚úÖ User registered successfully!'
    
    return '''
        <form method="POST">
            Username: <input type="text" name="username"><br>
            Email: <input type="email" name="email"><br>
            Password: <input type="password" name="password"><br>
            <input type="submit" value="Register">
        </form>
    '''

# Run the app
if __name__ == '__main__':
    app.run(debug=True, port=5001)

26-04-2025

<!DOCTYPE html>
<html>
<head>
  <title>Login | WorkSphere</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
  <h2>Welcome to WorkSphere</h2>
  <form action="{{ url_for('dashboard') }}" method="POST">
    <label for="email">Email:</label>
    <input type="email" name="email" required>

    <label for="password">Password:</label>
    <input type="password" name="password" required>

    <button type="submit">Login</button>
  </form>

  <script src="{{ url_for('static', filename='js/script.js') }}"></script>
</body>
</html>
